#ifndef MARCCDREADER_H
#define MARCCDREADER_H


///////////////////////////////////////////////////////////
// YAT::TASK 
///////////////////////////////////////////////////////////
#include <yat/threading/Task.h>
#include <yat/time/Timer.h>
#include <DiffractionImage.h>			//- to read back img data

///////////////////////////////////////////////////////////


#include <stdlib.h>
#include <limits>

//#include "Debug.h"
#include "Data.h"

#include "HwMaxImageSizeCallback.h"
#include "MarccdCamera.h"
#include "HwBufferCtrlObj.h"


using namespace lima;
using namespace lima::Marccd;
using namespace std;



namespace lima
{
namespace Marccd
{

/*******************************************************************
 * \class Reader
 * \brief object involved reading/watching CBF files generated by Pilatus
 *******************************************************************/

class Reader : public yat::Task
{
  DEB_CLASS_NAMESPC(DebModCamera, "Reader", "Marccd");

public:
	//- CTOR
	Reader(Camera& cam, HwBufferCtrlObj& buffer_ctrl);
	//- DTOR
	~Reader();

	//- begin sequence to acquire an image
	void start();
	//- clear data
	void reset();
	//- return curent image index
	int  getLastAcquiredFrame();
	//- return true if reader can not read image file during a "Timeout"
	bool isTimeoutSignaled();
	//- return true if reader is processing image file
	bool isRunning();
	//- define max allowed time to read image file
	void setTimeout(double);
	//- allow using diffraction image to open image file
	void enableReader();
	//- use simulated image (all pixels sets to 0)
	void disableReader();

	//- [yat::Task implementation]
protected: 
	virtual void handle_message( yat::Message& msg )    throw (yat::Exception);

	//- read Marccd image from a file and update device image attribute
	bool getImageFromFile();

private:

	//- Mutex
	yat::Mutex                  _lock;
	Camera&                     _cam;
	HwBufferCtrlObj&            _buffer;
	int                         _image_number;

	//- Loading image stuff!
	// Size                        _image_size;
	std::string		_currentImgFileName;	//- new image to read
	uint16_t*                   _simulated_image;
	bool			_is_reader_open_image_file;	//- FALSE : to return a simulated image !

	//- Timeout management (while processing image file)
	yat::Timeout*								_tmOut;

};
} // namespace Marccd
} // namespace lima

#endif // MARCCDREADER_H
